name: C++ Build and Run

on:
  push:
    branches: [main, hw]
  pull_request:
    branches: [main, hw]

jobs:
  build-docker:
    uses: ./.github/workflows/docker-build.yml

  test:
    name: Build and Test
    needs: build-docker
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: cpp_course-image

      - name: Load Docker image
        run: docker load -i cpp_course_image.tar

      - name: Run tests in container
        run: |
          # Create results directory on host
          mkdir -p test-results
          
          # Mount repository and results directory
          docker run --name cpp_course_container \
            -v ${{ github.workspace }}:/workspace \
            bmstu_cpp_course-bmstu:latest \
            bash -c "cd /workspace && \
                    mkdir -p build && \
                    cd build && \
                    cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_CXX_FLAGS='-fprofile-arcs -ftest-coverage' && \
                    cmake --build . && \
                    cd .. && \
                    mkdir -p test-results && \
                    # Run only our project's test executables, not GoogleTest's Python tests
                    for test_bin in \$(find build/tasks -type f -executable); do \
                      echo \"Running \$test_bin\" && \
                      \$test_bin --gtest_output=xml:test-results/\$(basename \$test_bin).xml || true; \
                    done && \
                    # Copy test results to host-mounted directory
                    cp -r test-results/* /workspace/test-results/ || true"
          
          # Show what test results were found
          echo "Found test results:"
          ls -la test-results/

      - name: Upload XML test results
        if: always()
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: test_results_xml
          path: test-results/
          if-no-files-found: warn
          retention-days: 5
          
      - name: Publish Test Results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: test-results/**/*.xml
          check_name: "Test Results"
          comment_title: "Test Results"
          check_run_annotations: all tests, skipped tests
          
      - name: Generate HTML report
        if: always()
        run: |
          pip install junit2html
          mkdir -p html-reports
          for xml_file in $(find test-results -name "*.xml"); do
            output_file="html-reports/$(basename ${xml_file%.xml}).html"
            junit2html $xml_file $output_file || true
          done
          
      - name: Upload HTML test report
        if: always()
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: test_results_html
          path: html-reports/
          if-no-files-found: warn
          retention-days: 5
          sosal?
